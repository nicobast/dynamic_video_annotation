as.numeric(substr(max_time,4,5))*600+
as.numeric(substr(max_time,7,8))*10
###get max time
max_time<-max(rating_df$Offset_Time)
max_time<-format(max_time,"%H:%M:%OS1") #backconverted to character
###calculate the number of tens of seconds
vector_rows<-as.numeric(substr(max_time,1,2))*36000+
as.numeric(substr(max_time,4,5))*600+
as.numeric(substr(max_time,7,8))*10+
as.numeric(substr(max_time,10,10))
#length of rater vector based on rated time
rater_vector<-rep(NA,vector_rows)
as.numeric(difftime(rating_df$Onset_Time[10],min(rating_df$Onset_Time)))
View(rater1_task1_mutual)
##create a matrix - function takes interact ratings and creates vector in tenth of second format with according rating label
fun_rater_vector<-function(rating_df){
###get max time
max_time<-max(rating_df$Offset_Time)
max_time<-format(max_time,"%H:%M:%OS1") #backconverted to character
###calculate the number of tens of seconds
vector_rows<-as.numeric(substr(max_time,1,2))*36000+
as.numeric(substr(max_time,4,5))*600+
as.numeric(substr(max_time,7,8))*10+
as.numeric(substr(max_time,10,10))
#length of rater vector based on rated time
rater_vector<-rep(NA,vector_rows)
#function that fills a vector with categories based on ratings
for(i in 1:nrow(rating_df)){
start_row<-round(as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))*10)
end_row<-round(as.numeric(difftime(rating_df$Offset_Time[i],min(rating_df$Onset_Time)))*10)
category<-rating_df[i,4]
if(is.na(category)){category<-FALSE}
rater_vector[start_row:end_row]<-category
}
return(rater_vector)
}
test_vector<-fun_rater_vector(rating_df=rater1_task1_mutual)
test2_vector<-fun_rater_vector(rating_df=rater2_task1_mutual)
table(test_vector)
table(test2_vector)
View(rater2_task1_mutual)
table(test_vector)
table(test2_vector)
rating_df<-matrix(NA, nrow=max(c(test_vector,test2_vector)),ncol=2)
rating_df<-matrix(NA, nrow=max(c(length(test_vector),length(test2_vector))),ncol=2)
rating_df<-data.frame(matrix(NA, nrow=max(c(length(test_vector),length(test2_vector))),ncol=2))
rating_df$X1[1:length(test_vector)]<-test_vector
rating_df$X2[1:length(test2_vector)]<-test2_vector
table(rating_df[,1],rating_df[,2]) #look into contingency table
cohen.kappa(rating_df)
require(psych)
cohen.kappa(rating_df)
table(rating_df[,1],rating_df[,2]) #look into contingency table
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE) #show code in markdown
## packages
require(openxlsx)
require(ggplot2)
require(psych) #IRR metric
theme_set(theme_bw())
## paths
path<-'C:/Users/nico/PowerFolders/project_dynamic/video_annotations'
##required functions
###time conversion
fun_timeconv<-function(x){
as.POSIXct(x,format = "%H:%M:%OS") #consider fractional seconds = milliseconds with %OS
}
###task selection function
fun_seltask<-function(x,var_name){
x<-x[,names(x) %in% c('Number','Onset_Time','Offset_Time',var_name)]
}
# Chunk 2: read and select data
rating_category<-'Follow'
cutoff<-as.POSIXct("00:05:00",format = "%H:%M:%OS") #time frame
#select rater data
rater2<-read.xlsx(paste0(path,'/data/FRA_038_T5_ESCS_Übereinstimmung.xlsx'),sheet = 2) #MERLINDA
rater1<-read.xlsx(paste0(path,'/data/FRA_038_T5_ESCS_Übereinstimmung.xlsx'),sheet = 1,rows = 1:309) #ROSA
#convert time data
rater1$Offset_Time<-fun_timeconv(rater1$Offset_Time)
rater1$Onset_Time<-fun_timeconv(rater1$Onset_Time)
rater2$Offset_Time<-fun_timeconv(rater2$Offset_Time)
rater2$Onset_Time<-fun_timeconv(rater2$Onset_Time)
#select a task based on timestamp
rater1_task1<-rater1[rater1$Onset_Time<cutoff,]
rater2_task1<-rater2[rater2$Onset_Time<cutoff,]
#select a rating category
rater1_task1_mutual<-fun_seltask(rater1_task1,rating_category)
rater2_task1_mutual<-fun_seltask(rater2_task1,rating_category)
rating_df<-rater2_task1_mutual
View(rater2_task1_mutual)
rating_df<-rater2_task1_mutual
###get max time
max_time<-max(rating_df$Offset_Time)
max_time<-format(max_time,"%H:%M:%OS2") #backconverted to character
###calculate the number of tens of seconds
vector_rows<-as.numeric(substr(max_time,1,2))*360000+
as.numeric(substr(max_time,4,5))*6000+
as.numeric(substr(max_time,7,8))*100+
as.numeric(substr(max_time,10,11))
#length of rater vector based on rated time
rater_vector<-rep(NA,vector_rows)
#function that fills a vector with categories based on ratings
for(i in 1:nrow(rating_df)){
start_row<-round(as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))*100)
end_row<-round(as.numeric(difftime(rating_df$Offset_Time[i],min(rating_df$Onset_Time)))*100)
category<-rating_df[i,4]
if(is.na(category)){category<-FALSE}
rater_vector[start_row:end_row]<-category
}
table(rating_df[,4])
#function that fills a vector with categories based on ratings
for(i in 1:nrow(rating_df)){
start_row<-round(as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))*100)
end_row<-round(as.numeric(difftime(rating_df$Offset_Time[i],min(rating_df$Onset_Time)))*100)
category<-rating_df[i,4]
if(is.na(category)){category<-FALSE}
rater_vector[start_row:end_row]<-category
}
#function that fills a vector with categories based on ratings
for(i in 1:nrow(rating_df)){
start_row<-round(as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))*100)
end_row<-round(as.numeric(difftime(rating_df$Offset_Time[i],min(rating_df$Onset_Time)))*100)
category<-rating_df[i,4]
if(is.na(category)){category<-FALSE}
rater_vector[start_row:end_row]<-category
}
#function that fills a vector with categories based on ratings
for(i in 1:nrow(rating_df)){
start_row<-round(as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))*100)
end_row<-round(as.numeric(difftime(rating_df$Offset_Time[i],min(rating_df$Onset_Time)))*100)
category<-rating_df[i,4]
if(is.na(category)){category<-FALSE}
rater_vector[start_row:end_row]<-category
}
#function that fills a vector with categories based on ratings
for(i in 1:nrow(rating_df)){
start_row<-round(as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))*100)
end_row<-round(as.numeric(difftime(rating_df$Offset_Time[i],min(rating_df$Onset_Time)))*100)
category<-rating_df[i,4]
if(is.na(category)){category<-FALSE}
rater_vector[start_row:end_row]<-category
print(c(start_row,end_row,category))
}
rating_df<-rater2_task1_mutual
###get max time
max_time<-max(rating_df$Offset_Time)
max_time<-format(max_time,"%H:%M:%OS2") #backconverted to character
###calculate the number of tens of seconds
vector_rows<-as.numeric(substr(max_time,1,2))*360000+
as.numeric(substr(max_time,4,5))*6000+
as.numeric(substr(max_time,7,8))*100+
as.numeric(substr(max_time,10,11))
#length of rater vector based on rated time
rater_vector<-rep(NA,vector_rows)
#function that fills a vector with categories based on ratings
for(i in 1:nrow(rating_df)){
start_row<-round(as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))*100)
end_row<-round(as.numeric(difftime(rating_df$Offset_Time[i],min(rating_df$Onset_Time)))*100)
category<-rating_df[i,4]
print(c(start_row,end_row,category))
if(is.na(category)){category<-FALSE}
rater_vector[start_row:end_row]<-category
}
table(rater_vector)
rating_df<-rater2_task1_mutual
###get max time
max_time<-max(rating_df$Offset_Time)
max_time<-format(max_time,"%H:%M:%OS2") #backconverted to character
###calculate the number of tens of seconds
vector_rows<-as.numeric(substr(max_time,1,2))*360000+
as.numeric(substr(max_time,4,5))*6000+
as.numeric(substr(max_time,7,8))*100+
as.numeric(substr(max_time,10,11))
#length of rater vector based on rated time
rater_vector<-rep(NA,vector_rows)
#function that fills a vector with categories based on ratings
for(i in 1:nrow(rating_df)){
start_row<-round(as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))*100)
end_row<-round(as.numeric(difftime(rating_df$Offset_Time[i],min(rating_df$Onset_Time)))*100)
category<-rating_df[i,4]
print(c(start_row,end_row,category))
if(is.na(category)){category<-FALSE}
rater_vector[start_row:end_row]<-category
}
min(rating_df$Onset_Time)
format(min(rating_df$Onset_Time),"%H:%M:%OS2")
format(rating_df$Onset_Time[100],"%H:%M:%OS2")
difftime(rating_df$Onset_Time[100],min(rating_df$Onset_Time))
round(as.numeric(difftime(rating_df$Onset_Time[100],min(rating_df$Onset_Time))*100))
as.numeric(difftime(rating_df$Onset_Time[100],min(rating_df$Onset_Time))*100)
difftime(rating_df$Onset_Time[100],min(rating_df$Onset_Time)
format(rating_df$Onset_Time[100],"%H:%M:%OS2")
difftime(rating_df$Onset_Time[100],min(rating_df$Onset_Time))
difftime(rating_df$Onset_Time[100],min(rating_df$Onset_Time))*100
as.numeric(difftime(rating_df$Onset_Time[100],min(rating_df$Onset_Time)))
as.numeric(difftime(rating_df$Onset_Time[100],min(rating_df$Onset_Time)))*60
format(difftime(rating_df$Onset_Time[100],min(rating_df$Onset_Time))),'secs')
format(difftime(rating_df$Onset_Time[100],min(rating_df$Onset_Time)),'secs')
format(difftime(rating_df$Onset_Time[100],min(rating_df$Onset_Time)),'sec')
difftime(rating_df$Onset_Time[100],min(rating_df$Onset_Time))
?format
rating_df$Onset_Time[100]
difftime(rating_df$Onset_Time[100],min(rating_df$Onset_Time),'secs')
?difftime
difftime(rating_df$Onset_Time[100],min(rating_df$Onset_Time),units='secs')
rating_df$Onset_Time[100]
View(rater2_task1_mutual)
difftime(rating_df$Onset_Time[100],min(rating_df$Onset_Time))
as.nuemric(difftime(rating_df$Onset_Time[100],min(rating_df$Onset_Time)))
as.numeric(difftime(rating_df$Onset_Time[100],min(rating_df$Onset_Time)))
as.numeric(difftime(rating_df$Onset_Time[100],min(rating_df$Onset_Time)))*60
as.numeric(difftime(rating_df$Onset_Time[100],min(rating_df$Onset_Time)))*60*100
#length of rater vector based on rated time
rater_vector<-rep(NA,vector_rows)
#function that fills a vector with categories based on ratings
for(i in 1:nrow(rating_df)){
start_row<-as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))*6000
end_row<-as.numeric(difftime(rating_df$Offset_Time[i],min(rating_df$Onset_Time)))*6000
category<-rating_df[i,4]
print(c(start_row,end_row,category))
if(is.na(category)){category<-FALSE}
rater_vector[start_row:end_row]<-category
}
#length of rater vector based on rated time
rater_vector<-rep(NA,vector_rows)
#function that fills a vector with categories based on ratings
for(i in 1:nrow(rating_df)){
start_row<-round(as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))*6000)
end_row<-round(as.numeric(difftime(rating_df$Offset_Time[i],min(rating_df$Onset_Time)))*6000)
category<-rating_df[i,4]
print(c(start_row,end_row,category))
if(is.na(category)){category<-FALSE}
rater_vector[start_row:end_row]<-category
}
##create a matrix - function takes interact ratings and creates vector in tenth of second format with according rating label
fun_rater_vector<-function(rating_df){
###get max time
max_time<-max(rating_df$Offset_Time)
max_time<-format(max_time,"%H:%M:%OS2") #backconverted to character
###calculate the number of tens of seconds
vector_rows<-as.numeric(substr(max_time,1,2))*360000+
as.numeric(substr(max_time,4,5))*6000+
as.numeric(substr(max_time,7,8))*100+
as.numeric(substr(max_time,10,11))
#length of rater vector based on rated time
rater_vector<-rep(NA,vector_rows)
#function that fills a vector with categories based on ratings
for(i in 1:nrow(rating_df)){
start_row<-round(as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))*6000)
end_row<-round(as.numeric(difftime(rating_df$Offset_Time[i],min(rating_df$Onset_Time)))*6000)
category<-rating_df[i,4]
print(c(start_row,end_row,category))
if(is.na(category)){category<-FALSE}
rater_vector[start_row:end_row]<-category
}
return(rater_vector)
}
#convert to vector
test_vector<-fun_rater_vector(rating_df=rater1_task1_mutual)
test2_vector<-fun_rater_vector(rating_df=rater2_task1_mutual)
table(test_vector)
table(test2_vector)
##create a matrix - function takes interact ratings and creates vector in tenth of second format with according rating label
fun_rater_vector<-function(rating_df){
###get max time
max_time<-max(rating_df$Offset_Time)
max_time<-format(max_time,"%H:%M:%OS2") #backconverted to character
###calculate the number of tens of seconds
vector_rows<-as.numeric(substr(max_time,1,2))*360000+
as.numeric(substr(max_time,4,5))*6000+
as.numeric(substr(max_time,7,8))*100+
as.numeric(substr(max_time,10,11))
#length of rater vector based on rated time
rater_vector<-rep(NA,vector_rows)
#function that fills a vector with categories based on ratings
for(i in 1:nrow(rating_df)){
start_row<-round(as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))*6000)
end_row<-round(as.numeric(difftime(rating_df$Offset_Time[i],min(rating_df$Onset_Time)))*6000)
category<-rating_df[i,4]
print(c(start_row,end_row,category))
if(is.na(category)){category<-FALSE}
rater_vector[start_row:end_row]<-category
}
return(rater_vector)
}
#convert to vector
test_vector<-fun_rater_vector(rating_df=rater1_task1_mutual)
test2_vector<-fun_rater_vector(rating_df=rater2_task1_mutual)
table(test_vector)
table(test2_vector)
rating_df<-rater2_task1_task
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE) #show code in markdown
## packages
require(openxlsx)
require(ggplot2)
require(psych) #IRR metric
theme_set(theme_bw())
## paths
path<-'C:/Users/nico/PowerFolders/project_dynamic/video_annotations'
##required functions
###time conversion
fun_timeconv<-function(x){
as.POSIXct(x,format = "%H:%M:%OS") #consider fractional seconds = milliseconds with %OS
}
###task selection function
fun_seltask<-function(x,var_name){
x<-x[,names(x) %in% c('Number','Onset_Time','Offset_Time',var_name)]
}
# Chunk 2: read and select data
rating_category<-'Mutual'
cutoff<-as.POSIXct("00:05:00",format = "%H:%M:%OS") #time frame
#select rater data
rater2<-read.xlsx(paste0(path,'/data/FRA_038_T5_ESCS_Übereinstimmung.xlsx'),sheet = 2) #MERLINDA
rating_category<-'Mutual'
cutoff<-as.POSIXct("00:05:00",format = "%H:%M:%OS") #time frame
#select rater data
rater2<-read.xlsx(paste0(path,'/data/FRA_038_T5_ESCS_Übereinstimmung.xlsx'),sheet = 2) #MERLINDA
knitr::opts_chunk$set(echo = TRUE) #show code in markdown
## packages
require(openxlsx)
require(ggplot2)
require(psych) #IRR metric
theme_set(theme_bw())
## paths
path<-'C:/Users/nico/PowerFolders/project_dynamic/video_annotations'
##required functions
###time conversion
fun_timeconv<-function(x){
as.POSIXct(x,format = "%H:%M:%OS") #consider fractional seconds = milliseconds with %OS
}
###task selection function
fun_seltask<-function(x,var_name){
x<-x[,names(x) %in% c('Number','Onset_Time','Offset_Time',var_name)]
}
rating_category<-'Mutual'
cutoff<-as.POSIXct("00:05:00",format = "%H:%M:%OS") #time frame
#select rater data
rater2<-read.xlsx(paste0(path,'/data/FRA_038_T5_ESCS_Übereinstimmung.xlsx'),sheet = 2) #MERLINDA
rater1<-read.xlsx(paste0(path,'/data/FRA_038_T5_ESCS_Übereinstimmung.xlsx'),sheet = 1,rows = 1:309) #ROSA
knitr::opts_chunk$set(echo = TRUE) #show code in markdown
## packages
require(openxlsx)
require(ggplot2)
require(psych) #IRR metric
theme_set(theme_bw())
## paths
path<-'C:/Users/nico/PowerFolders/project_dynamic/video_annotations'
##required functions
###time conversion
fun_timeconv<-function(x){
as.POSIXct(x,format = "%H:%M:%OS") #consider fractional seconds = milliseconds with %OS
}
###task selection function
fun_seltask<-function(x,var_name){
x<-x[,names(x) %in% c('Number','Onset_Time','Offset_Time',var_name)]
}
rating_category<-'Mutual'
cutoff<-as.POSIXct("00:05:00",format = "%H:%M:%OS") #time frame
#select rater data
rater2<-read.xlsx(paste0(path,'/data/FRA_038_T5_ESCS_Übereinstimmung.xlsx'),sheet = 2) #MERLINDA
rater1<-read.xlsx(paste0(path,'/data/FRA_038_T5_ESCS_Übereinstimmung.xlsx'),sheet = 1,rows = 1:309) #ROSA
#convert time data
rater1$Offset_Time<-fun_timeconv(rater1$Offset_Time)
rater1$Onset_Time<-fun_timeconv(rater1$Onset_Time)
rater2$Offset_Time<-fun_timeconv(rater2$Offset_Time)
rater2$Onset_Time<-fun_timeconv(rater2$Onset_Time)
#select a task based on timestamp
rater1_task1<-rater1[rater1$Onset_Time<cutoff,]
rater2_task1<-rater2[rater2$Onset_Time<cutoff,]
#select a rating category
rater1_task1_category<-fun_seltask(rater1_task1,rating_category)
rater2_task1_category<-fun_seltask(rater2_task1,rating_category)
table(rater1_task1_category[,4])
table(rater2_task1_category[,4])
#combine onset and offset data with rater for plotting
y1<-rater1_task1_category[!is.na(rater1_task1_category[,4]),2:3]
y1$rater<-"Rosa"
y1$seq<-1:nrow(y1)
y2<-rater2_task1_category[!is.na(rater2_task1_category[,4]),2:3]
y2$rater<-"Merlinda"
y2$seq<-1:nrow(y2)
df<-rbind(y1,y2)
ggplot(df,aes(x=Onset_Time,y=Offset_Time,group=rater,color=rater))+geom_point(alpha=0.5)
ggplot(df) +
geom_segment(aes(x = seq, xend = seq, y = Onset_Time, yend = Offset_Time,color=rater,linewidth=3)) +
labs(title = "Bars with Onset and Offset on Y-axis",
x = paste("gaze event number (gaze event:",rating_category,")"),
y = "segment duration (min)")
rating_df<-rater2_task1_category
###get max time
max_time<-max(rating_df$Offset_Time)
max_time<-format(max_time,"%H:%M:%OS2") #backconverted to character
###calculate the number of tens of seconds
vector_rows<-as.numeric(substr(max_time,1,2))*360000+
as.numeric(substr(max_time,4,5))*6000+
as.numeric(substr(max_time,7,8))*100+
as.numeric(substr(max_time,10,11))
#length of rater vector based on rated time
rater_vector<-rep(NA,vector_rows)
#function that fills a vector with categories based on ratings
for(i in 1:nrow(rating_df)){
start_row<-round(as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))*6000)
end_row<-round(as.numeric(difftime(rating_df$Offset_Time[i],min(rating_df$Onset_Time)))*6000)
category<-rating_df[i,4]
print(c(start_row,end_row,category))
if(is.na(category)){category<-FALSE}
rater_vector[start_row:end_row]<-category
}
return(rater_vector)
table(rater_vector)
table(rater2_task1_category[,4])
table(rater1_task1_category[,4])
rating_df<-rater2_task1_category
###get max time
max_time<-max(rating_df$Offset_Time)
max_time<-format(max_time,"%H:%M:%OS2") #backconverted to character
###calculate the number of tens of seconds
vector_rows<-as.numeric(substr(max_time,1,2))*360000+
as.numeric(substr(max_time,4,5))*6000+
as.numeric(substr(max_time,7,8))*100+
as.numeric(substr(max_time,10,11))
#length of rater vector based on rated time
rater_vector<-rep(NA,vector_rows)
#function that fills a vector with categories based on ratings
for(i in 1:nrow(rating_df)){
start_row<-round(as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))*6000)
end_row<-round(as.numeric(difftime(rating_df$Offset_Time[i],min(rating_df$Onset_Time)))*6000)
category<-rating_df[i,4]
print(c(start_row,end_row,category))
if(is.na(category)){category<-FALSE}
rater_vector[start_row:end_row]<-category
}
table(rater_vector)
#length of rater vector based on rated time
rater_vector<-rep(NA,vector_rows)
#function that fills a vector with categories based on ratings
for(i in 1:nrow(rating_df)){
start_row<-round(as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))*6000)
end_row<-round(as.numeric(difftime(rating_df$Offset_Time[i],min(rating_df$Onset_Time)))*6000)
category<-rating_df[i,4]
if(is.na(category)){category<-FALSE}
print(c(start_row,end_row,category))
rater_vector[start_row:end_row]<-category
}
#length of rater vector based on rated time
rater_vector<-rep(NA,vector_rows)
#function that fills a vector with categories based on ratings
for(i in 1:nrow(rating_df)){
start_row<-round(as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))*6000)
end_row<-round(as.numeric(difftime(rating_df$Offset_Time[i],min(rating_df$Onset_Time)))*6000)
category<-rating_df[i,4]
if(is.na(category)){category<-'NONE'}
print(c(start_row,end_row,category))
rater_vector[start_row:end_row]<-category
}
View(rater2_task1_category)
#length of rater vector based on rated time
rater_vector<-rep(NA,vector_rows)
#function that fills a vector with categories based on ratings
for(i in 1:nrow(rating_df)){
start_row<-round(as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))*6000)
end_row<-round(as.numeric(difftime(rating_df$Offset_Time[i],min(rating_df$Onset_Time)))*6000)
category<-rating_df[i,4]
if(is.na(category)){category<-'NONE'}
print(c(i,start_row,end_row,category))
rater_vector[start_row:end_row]<-category
}
View(rater2_task1_category)
i<-84
start_row<-round(as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))*6000)
rating_df$Onset_Time[i]
min(rating_df$Onset_Time)
difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time))
as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))
as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time)))*6000
difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time))
difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time),units='min')
##create a matrix - function takes interact ratings and creates vector in tenth of second format with according rating label
fun_rater_vector<-function(rating_df){
###get max time
max_time<-max(rating_df$Offset_Time)
max_time<-format(max_time,"%H:%M:%OS2") #backconverted to character
###calculate the number of tens of seconds
vector_rows<-as.numeric(substr(max_time,1,2))*360000+
as.numeric(substr(max_time,4,5))*6000+
as.numeric(substr(max_time,7,8))*100+
as.numeric(substr(max_time,10,11))
#length of rater vector based on rated time
rater_vector<-rep(NA,vector_rows)
#function that fills a vector with categories based on ratings
for(i in 1:nrow(rating_df)){
start_row<-round(as.numeric(difftime(rating_df$Onset_Time[i],min(rating_df$Onset_Time),units='secs'))*100)
end_row<-round(as.numeric(difftime(rating_df$Offset_Time[i],min(rating_df$Onset_Time),units='secs'))*100)
category<-rating_df[i,4]
if(is.na(category)){category<-'NONE'}
print(c(i,start_row,end_row,category))
rater_vector[start_row:end_row]<-category
}
return(rater_vector)
}
#convert to vector
test_vector<-fun_rater_vector(rating_df=rater1_task1_category)
test2_vector<-fun_rater_vector(rating_df=rater2_task1_category)
table(test_vector)
table(test2_vector)
#create a matrix combing ratings, consider different lengths
rating_df<-data.frame(matrix(NA, nrow=max(c(length(test_vector),length(test2_vector))),ncol=2))
rating_df$X1[1:length(test_vector)]<-test_vector
rating_df$X2[1:length(test2_vector)]<-test2_vector
table(rating_df[,1],rating_df[,2]) #look into contingency table
cohen.kappa(rating_df)
